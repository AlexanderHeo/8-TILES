{"version":3,"sources":["shuffle.js","solver.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["invCount","arr","inv","i","length","j","shuffle","copy","n","Math","floor","random","push","parent","left","right","PriorityQueue","comparator","a","b","this","_heap","_comparator","size","values","forEach","value","_siftUp","poppedValue","peek","bottom","_swap","pop","_siftDown","replacedValue","node","_greater","maxChild","Board","empty_pos","calc_empty","priority","hamming","h","correctBoard","isBoardSame","b1","b2","getNextBoards","ret","slice","temp","cmp","convArr","empty_i","empty_j","grid","listMoves","arr2d","concat","sol","start_board","visited","q","isEmpty","curr","children","child","to_push","solver","reverse","Tile","props","className","startClock","interval","setInterval","increment","stopClock","window","clearInterval","setState","state","time","started_solving","could_be_won","solving","solve","timer","stop_solve","reset","handleChange","event","key","keyCode","down","up","shuffleBoard","shuffleGrid","correct","calculateWinner","onKeyDown","tabIndex","map","list","item","onClick","React","Component","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9ba0837c.chunk.js","sourcesContent":["export function shuffleGrid(){\r\n    let arr=[];\r\n    let ret=[[],[],[]];\r\n    do{\r\n        arr=shuffle();\r\n    }while(invCount(arr)%2!==0);\r\n    for(let i=0;i<arr.length;++i)\r\n    {\r\n        ret[Math.floor(i/3)].push(arr[i]);\r\n    }\r\n    return ret;\r\n}\r\nexport function invCount(arr){\r\n    //heck it dosen't matter in n=9 still\r\n    //can be done using merge sort O(nlgn)\r\n    //current O(n^2)\r\n    let inv=0;\r\n    for(let i=0;i<arr.length-1;++i)\r\n    {\r\n        for(let j=i+1;j<arr.length;++j)\r\n        {\r\n            if(arr[i]>arr[j] && arr[i]!==0 && arr[j]!==0)\r\n                inv++;\r\n        }\r\n    }\r\n    return inv;\r\n}\r\nexport function shuffle(){\r\n    //redo with fisher yates algo\r\n    let arr=[0,1,2,3,4,5,6,7,8];\r\n    let copy=[],n=arr.length,i;\r\n\r\n    while(n){\r\n        //pick a random element \r\n        i=Math.floor(Math.random()*arr.length);\r\n\r\n        if (i in arr)\r\n        {\r\n            copy.push(arr[i]);\r\n            delete arr[i];\r\n            n--;\r\n        }\r\n    }\r\n    return copy;\r\n}\r\nexport function calculateWinner(arr){\r\n    let a=[\r\n        [1,2,3],\r\n        [4,5,6],\r\n        [7,8,0]\r\n    ];\r\n    for (let i=0;i<3;i++)\r\n        for (let j=0;j<3;j++)\r\n            if(arr[i][j]!==a[i][j])\r\n                return false;\r\n    return true;\r\n}\r\n\r\n\r\n\r\n","//V 0.0 without manhatan function\r\n//implment visited using hashing\r\n//queue\r\nconst top = 0;\r\nconst parent = i => ((i + 1) >>> 1) - 1;\r\nconst left = i => (i << 1) + 1;\r\nconst right = i => (i + 1) << 1;\r\n\r\nclass PriorityQueue {\r\n  constructor(comparator = (a, b) => a > b) {\r\n    this._heap = [];\r\n    this._comparator = comparator;\r\n  }\r\n  size() {\r\n    return this._heap.length;\r\n  }\r\n  isEmpty() {\r\n    return this.size() === 0;\r\n  }\r\n  peek() {\r\n    return this._heap[top];\r\n  }\r\n  push(...values) {\r\n    values.forEach(value => {\r\n      this._heap.push(value);\r\n      this._siftUp();\r\n    });\r\n    return this.size();\r\n  }\r\n  pop() {\r\n    const poppedValue = this.peek();\r\n    const bottom = this.size() - 1;\r\n    if (bottom > top) {\r\n      this._swap(top, bottom);\r\n    }\r\n    this._heap.pop();\r\n    this._siftDown();\r\n    return poppedValue;\r\n  }\r\n  replace(value) {\r\n    const replacedValue = this.peek();\r\n    this._heap[top] = value;\r\n    this._siftDown();\r\n    return replacedValue;\r\n  }\r\n  _greater(i, j) {\r\n    return this._comparator(this._heap[i], this._heap[j]);\r\n  }\r\n  _swap(i, j) {\r\n    [this._heap[i], this._heap[j]] = [this._heap[j], this._heap[i]];\r\n  }\r\n  _siftUp() {\r\n    let node = this.size() - 1;\r\n    while (node > top && this._greater(node, parent(node))) {\r\n      this._swap(node, parent(node));\r\n      node = parent(node);\r\n    }\r\n  }\r\n  _siftDown() {\r\n    let node = top;\r\n    while (\r\n      (left(node) < this.size() && this._greater(left(node), node)) ||\r\n      (right(node) < this.size() && this._greater(right(node), node))\r\n    ) {\r\n      let maxChild = (right(node) < this.size() && this._greater(right(node), left(node))) ? right(node) : left(node);\r\n      this._swap(node, maxChild);\r\n      node = maxChild;\r\n    }\r\n  }\r\n}\r\n\r\n\r\nclass Board {\r\n    constructor(arr) {\r\n        this.arr = arr;\r\n        this.empty_pos = this.calc_empty();\r\n        this.priority=this.hamming();\r\n        this.parent=-1;\r\n      }\r\n\r\n    hamming(){\r\n        let h=0;\r\n        for(let i=0;i<8;i++)\r\n        {\r\n            if(this.arr[i]!==i+1)\r\n                h++;\r\n        }\r\n        return h;\r\n    }\r\n    calc_empty() {\r\n        let empty_pos;\r\n        for (let i = 0; i < this.arr.length; i++) {\r\n            if (this.arr[i] === 0)\r\n                empty_pos = i;\r\n        }\r\n        return empty_pos;\r\n    }\r\n}\r\nlet correctBoard =new Board([1,2,3,4,5,6,7,8,0]);\r\n\r\n//isBoardSame(board1,board2)\r\n//isVisited(board,visittedpuzzles)\r\n//isSolved(board)returns true if board is of orignal config\r\n//getNextBoards(board) returns an array of config board possible with one move\r\n//bfs to solve the board \r\nfunction isBoardSame(b1,b2) {\r\n    for(let i=0;i<b1.arr.length;i++)\r\n        if(b1.arr[i]!==b2.arr[i]) return false;\r\n    return true;\r\n}\r\nfunction isSolved(b1){\r\n    if(isBoardSame(b1,correctBoard)) return true;\r\n    return false;\r\n}\r\nfunction getNextBoards(b1){\r\n    let ret=[];\r\n    //swap with up\r\n    if(b1.empty_pos>2){\r\n        let arr=b1.arr.slice();\r\n        arr[b1.empty_pos]=arr[b1.empty_pos-3];\r\n        arr[b1.empty_pos-3]=0;\r\n        let temp=new Board(arr);\r\n        temp.parent=b1;\r\n        ret.push(temp);\r\n    }\r\n    //swap with down \r\n    if(b1.empty_pos <6){\r\n        let arr=b1.arr.slice();\r\n        arr[b1.empty_pos]=arr[b1.empty_pos+3];\r\n        arr[b1.empty_pos+3]=0;\r\n        let temp=new Board(arr);\r\n        temp.parent=b1;\r\n        ret.push(temp);\r\n    }\r\n    //swap with left\r\n    if(b1.empty_pos!==0 && b1.empty_pos!==3 && b1.empty_pos!==6){\r\n        let arr=b1.arr.slice();\r\n        arr[b1.empty_pos]=arr[b1.empty_pos-1];\r\n        arr[b1.empty_pos-1]=0;\r\n        let temp=new Board(arr);\r\n        temp.parent=b1;\r\n        ret.push(temp);        \r\n    }\r\n    //swap with right\r\n    if(b1.empty_pos!==2 && b1.empty_pos!==5 && b1.empty_pos!==8){\r\n        let arr=b1.arr.slice();\r\n        arr[b1.empty_pos]=arr[b1.empty_pos+1];\r\n        arr[b1.empty_pos+1]=0;\r\n        let temp=new Board(arr);\r\n        temp.parent=b1;\r\n        ret.push(temp);        \r\n    }    \r\n     return ret;\r\n}\r\n\r\nfunction cmp(b1,b2){\r\n    return b1.hamming()<b2.hamming();\r\n}\r\nfunction solver(start_board){\r\n    //push into queue \r\n    //pop minimum hamming distance boad from queue\r\n    //check if answer\r\n    //while queue not empty if children not visited push in queue  \r\n    //change visited to a hash table\r\n    let visited=[];\r\n    let q=new PriorityQueue(cmp);\r\n    q.push(start_board);\r\n    while(!q.isEmpty()){\r\n      let curr=q.peek();\r\n        visited.push(curr);\r\n        if(isSolved(curr))\r\n           return curr;\r\n        let children = getNextBoards(curr);\r\n        q.pop();\r\n        for(let child of children){\r\n            let to_push=true;\r\n            for(let board of visited)\r\n                if(isBoardSame(board,child)) to_push=false;\r\n            if(to_push)\r\n                q.push(child);  \r\n        }\r\n    }\r\n}\r\n\r\n//converts a 1d array into 2d array\r\nfunction convArr(arr) {\r\n\tlet empty_i=0;\r\n\tlet empty_j=0;\r\n\tlet grid = [[], [], []];\r\n\tfor (let i = 0; i < 9; i++){\r\n\t\tgrid[Math.floor(i / 3)].push(arr[i]);\r\n\t\tif(arr[i]===0)\r\n\t\t\t{empty_i=Math.floor(i/3);empty_j=i%3}\r\n\t}\r\n\treturn {grid,empty_i,empty_j};\r\n}\r\nexport function listMoves(arr2d){\r\n  let arr=[];\r\n  arr=[].concat(...arr2d);\r\n  let ret=[];\r\n  let puzzle =new Board(arr); \r\n  let sol=solver(puzzle);\r\n  while(sol.parent!==-1){\r\n    ret.push(convArr(sol.arr));\r\n    sol=sol.parent;  \r\n  }\r\n  ret.push(convArr(sol.arr));\r\n  ret.reverse();\r\n  return ret;\r\n}\r\n","import React from 'react';\r\nimport {shuffleGrid,calculateWinner} from './shuffle';\r\nimport {listMoves} from './solver';\r\nfunction Tile(props){\r\n    if (props.value!==0)\r\n    return (\r\n        <span className=\"tile\">\r\n            {props.value}\r\n        </span>\r\n    );\r\n    else\r\n    return(\r\n        <span className=\"empty\">\r\n            .\r\n        </span>\r\n    );\r\n}\r\n\r\n\r\nexport class Board extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            empty_i:2,\r\n            empty_j:2,\r\n            grid:[\r\n                [1,2,3],\r\n                [4,5,6],\r\n                [7,8,0]\r\n            ],\r\n            could_be_won:false,\r\n            time:0,\r\n            solving:false,\r\n        }\r\n    }           \r\n    componentDidMount(){\r\n\r\n    }\r\n    componentWillUnmount(){\r\n        //this.stopClock();\r\n    }\r\n    startClock = () => {\r\n        this.interval = setInterval(this.increment, 1000);\r\n    }\r\n    stopClock=()=>{\r\n        window.clearInterval(this.interval);\r\n    }\r\n    increment=()=>{\r\n        this.setState((state)=>({time:state.time+1}) );\r\n    }\r\n    started_solving=()=>{\r\n        this.setState({could_be_won:false,solving:true});\r\n    }\r\n    solve=()=>{\r\n\r\n        let sol =listMoves(this.state.grid);\r\n        let i=0;\r\n        if(sol.length>1 && !this.state.solving){\r\n             this.started_solving();\r\n             this.timer=setInterval(()=>{\r\n                if(i<sol.length){\r\n                    this.setState(sol[i]);\r\n                    i++;\r\n                }\r\n                else \r\n                    this.stop_solve();\r\n            },300);\r\n            this.reset();\r\n            //for(let i=0;i<sol.length;i++)\r\n            //    this.setState(sol[i]);\r\n        }\r\n    }\r\n    stop_solve=()=>{\r\n        clearInterval(this.timer);\r\n        this.reset();\r\n        this.setState({solving:false});\r\n    }\r\n    handleChange =(event)=>{\r\n        let grid=this.state.grid;\r\n        let empty_i=this.state.empty_i;\r\n        let empty_j=this.state.empty_j;\r\n        let key=event.keyCode;\r\n        let down = key===40 && empty_i!==0;\r\n        let up= key===38 && empty_i!==2\r\n        let right = key===39 && empty_j!==0;\r\n        let left = key===37 && empty_j!==2;\r\n\r\n        if (down || up || right || left){\r\n            let i;\r\n            let j;\r\n            if(down)\r\n                {i=empty_i-1;j=empty_j;}\r\n            if(up)\r\n                {i=empty_i+1;j=empty_j;}\r\n            if(right)\r\n                {i=empty_i;j=empty_j-1;}\r\n            if(left)\r\n                {i=empty_i;j=empty_j+1;}\r\n            \r\n            //swaping\r\n            let temp=grid[empty_i][empty_j];\r\n            grid[empty_i][empty_j]=grid[i][j];\r\n            grid[i][j]=temp;\r\n            this.setState({grid:grid,empty_i:i,empty_j:j});\r\n\r\n        }\r\n    }\r\n    shuffleBoard=()=>{\r\n        this.startClock();\r\n        let grid=shuffleGrid();\r\n        let could_be_won=true;\r\n        let i,j;\r\n        let empty_i,empty_j;\r\n        for(i=0;i<=2;i++)\r\n            for(j=0;j<=2;j++)\r\n                if(grid[i][j]===0)\r\n                    {empty_i=i;empty_j=j;j=2;i=2;}\r\n        this.setState({grid,empty_i,empty_j,could_be_won});\r\n    }\r\n    reset=()=>{\r\n        let could_be_won=false;\r\n        let grid=[\r\n            [1,2,3],\r\n            [4,5,6],\r\n            [7,8,0]\r\n        ];\r\n    this.stopClock();\r\n    this.setState({grid,could_be_won,empty_i:2,empty_j:2,time:0});\r\n    }\r\n    render(){\r\n        let correct=calculateWinner(this.state.grid);\r\n        let won=correct && this.state.could_be_won;\r\n        if (!won)\r\n        return(\r\n        <div>\r\n            <div className=\"card\">\r\n                <div className=\"board\" onKeyDown={this.handleChange} tabIndex=\"0\">\r\n                    {//box section\r\n                        this.state.grid.map((list, i)=>{\r\n                    return (\r\n                        <div key={i}>\r\n                            { list.map((item,j)=>{\r\n                                return(<Tile value={this.state.grid[i][j]} key={j}/>)\r\n                            }) }\r\n                        </div>\r\n                    )                                \r\n                    })\r\n                }\r\n                </div>\r\n                <div className=\"clock\">\r\n                    <h3>{Math.floor(this.state.time/60)} : {this.state.time%60}</h3>\r\n                </div>\r\n            </div>\r\n                <div className=\"buttons\">\r\n                    <button onClick={correct?this.shuffleBoard:this.reset}>{correct?\"START\":\"RESET\"}</button>\r\n                    <button onClick={!this.state.solving?this.solve:this.stop_solve}>{!this.state.solving?\"SOLVE\":\"STOP\"}</button>\r\n                </div>\r\n        </div>\r\n        );\r\n        else\r\n        {\r\n            this.stopClock();\r\n            return(\r\n                <div>\r\n                    <h1>You won in {Math.floor(this.state.time/60)}:{this.state.time%60} Reload to play again</h1>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}","import React from 'react';\nimport './board.css';\nimport {Board} from './Board';\n\nfunction App() {\n  return (\n    <div>\n      <h1>8-TILES</h1>\n      <Board/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}